#ifndef MentorESP8266PHTTP_H
#define MentorESP8266HTTP_H
#include <Arduino.h>
#include <time.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>

// CA certificates 0x30
// static const char fingerPrint[] PROGMEM = "3E:7A:CD:FA:4D:9F:5F:E0:77:24:CE:EA:B1:4E:F0:F1:43:EF:37:FC";

static const unsigned char certMentor_cer[] PROGMEM = {
  0x30, 0x82, 0x05, 0x3c, 0x30, 0x82, 0x04, 0x24, 0xa0, 0x03, 0x02, 0x01,
  0x02, 0x02, 0x12, 0x04, 0xf9, 0x4d, 0x05, 0x6e, 0x79, 0x60, 0xeb, 0x3b,
  0xfd, 0xdb, 0xa0, 0x94, 0x26, 0xe8, 0xed, 0x6c, 0xa4, 0x30, 0x0d, 0x06,
  0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00,
  0x30, 0x32, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
  0x02, 0x55, 0x53, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a,
  0x13, 0x0d, 0x4c, 0x65, 0x74, 0x27, 0x73, 0x20, 0x45, 0x6e, 0x63, 0x72,
  0x79, 0x70, 0x74, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x03,
  0x13, 0x02, 0x52, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x31, 0x30, 0x31,
  0x33, 0x31, 0x31, 0x39, 0x35, 0x37, 0x33, 0x32, 0x5a, 0x17, 0x0d, 0x32,
  0x31, 0x30, 0x35, 0x30, 0x31, 0x31, 0x39, 0x35, 0x37, 0x33, 0x32, 0x5a,
  0x30, 0x26, 0x31, 0x24, 0x30, 0x22, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13,
  0x1b, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
  0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x75, 0x70, 0x67, 0x2e, 0x61,
  0x63, 0x2e, 0x69, 0x64, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
  0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
  0x00, 0xd4, 0x1e, 0xf0, 0x29, 0xdc, 0xe4, 0xdf, 0xa4, 0x47, 0x03, 0x16,
  0xe9, 0xb3, 0x0d, 0xcc, 0x12, 0x53, 0x1a, 0x65, 0x65, 0xd3, 0x20, 0xc4,
  0x11, 0xf0, 0xd2, 0xf9, 0x4a, 0x82, 0xfa, 0x21, 0xb2, 0x1e, 0x9b, 0x58,
  0xe2, 0x6f, 0xef, 0xe6, 0xae, 0x55, 0xb3, 0x39, 0x0b, 0xb7, 0xcc, 0x97,
  0x37, 0x14, 0xb1, 0x1a, 0xe6, 0xee, 0x0e, 0x77, 0x51, 0xc2, 0x8a, 0x3b,
  0xd6, 0x9b, 0x41, 0x8c, 0x86, 0xf1, 0x19, 0xb7, 0x18, 0xfa, 0x54, 0x9b,
  0x8d, 0xfd, 0x9f, 0xe9, 0x91, 0xfa, 0x65, 0x4f, 0x41, 0x51, 0x76, 0x6e,
  0xc0, 0x65, 0x5f, 0xd4, 0x4d, 0x81, 0x90, 0x40, 0x6b, 0x02, 0x1a, 0xa6,
  0x71, 0xa4, 0x44, 0xc3, 0xb3, 0xf3, 0xac, 0x88, 0x58, 0x64, 0xe5, 0x49,
  0x16, 0x72, 0x62, 0xed, 0x20, 0x63, 0xbc, 0x81, 0x43, 0xb0, 0x4d, 0xe4,
  0x15, 0x75, 0x00, 0x98, 0x74, 0x78, 0x39, 0x56, 0x20, 0x04, 0x8a, 0x61,
  0xe1, 0x5e, 0x27, 0xa0, 0xc2, 0x24, 0x67, 0xd7, 0x93, 0xb3, 0x6c, 0xe0,
  0x14, 0x72, 0xf7, 0x42, 0x10, 0xd8, 0x53, 0x3f, 0xc2, 0xbb, 0x1d, 0xa6,
  0x3f, 0x9c, 0x06, 0x55, 0x5f, 0x82, 0xe9, 0x85, 0xda, 0x04, 0xaf, 0xd8,
  0xc9, 0x86, 0x90, 0xfa, 0x09, 0xff, 0x48, 0x0e, 0x00, 0x02, 0x3c, 0x10,
  0xd0, 0x40, 0x47, 0xf6, 0x13, 0xe7, 0x60, 0x3a, 0xe3, 0x30, 0x80, 0x06,
  0x50, 0x05, 0x7f, 0xda, 0xc2, 0xb2, 0x8a, 0x4f, 0xf3, 0x41, 0xda, 0x2c,
  0xa3, 0x7a, 0x0d, 0x4b, 0x00, 0x13, 0x23, 0x22, 0x77, 0xdc, 0x4b, 0x8e,
  0xf3, 0xf0, 0x31, 0x55, 0xb0, 0x0f, 0xdd, 0xcb, 0x75, 0xe6, 0xd7, 0x86,
  0x77, 0xea, 0xd8, 0xc6, 0x99, 0x7a, 0x2e, 0x75, 0xda, 0x33, 0xa3, 0x68,
  0xa5, 0xb0, 0xda, 0x79, 0xdb, 0x21, 0xb8, 0x9b, 0x16, 0xe0, 0xa5, 0x80,
  0x76, 0xa5, 0xa9, 0x40, 0x75, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82,
  0x02, 0x56, 0x30, 0x82, 0x02, 0x52, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d,
  0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 0xa0, 0x30, 0x1d,
  0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b,
  0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01,
  0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13,
  0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55,
  0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x1d, 0x50, 0xc8, 0x04, 0xbd, 0x7a,
  0x81, 0x7f, 0xb2, 0xda, 0xc0, 0xd0, 0xec, 0x96, 0xb0, 0xd4, 0x94, 0xb8,
  0x34, 0xe0, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
  0x16, 0x80, 0x14, 0x14, 0x2e, 0xb3, 0x17, 0xb7, 0x58, 0x56, 0xcb, 0xae,
  0x50, 0x09, 0x40, 0xe6, 0x1f, 0xaf, 0x9d, 0x8b, 0x14, 0xc2, 0xc6, 0x30,
  0x55, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04,
  0x49, 0x30, 0x47, 0x30, 0x21, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05,
  0x07, 0x30, 0x01, 0x86, 0x15, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
  0x72, 0x33, 0x2e, 0x6f, 0x2e, 0x6c, 0x65, 0x6e, 0x63, 0x72, 0x2e, 0x6f,
  0x72, 0x67, 0x30, 0x22, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
  0x30, 0x02, 0x86, 0x16, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x72,
  0x33, 0x2e, 0x69, 0x2e, 0x6c, 0x65, 0x6e, 0x63, 0x72, 0x2e, 0x6f, 0x72,
  0x67, 0x2f, 0x30, 0x26, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x1f, 0x30,
  0x1d, 0x82, 0x1b, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x63, 0x6f, 0x6e,
  0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x75, 0x70, 0x67,
  0x2e, 0x61, 0x63, 0x2e, 0x69, 0x64, 0x30, 0x4c, 0x06, 0x03, 0x55, 0x1d,
  0x20, 0x04, 0x45, 0x30, 0x43, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0c,
  0x01, 0x02, 0x01, 0x30, 0x37, 0x06, 0x0b, 0x2b, 0x06, 0x01, 0x04, 0x01,
  0x82, 0xdf, 0x13, 0x01, 0x01, 0x01, 0x30, 0x28, 0x30, 0x26, 0x06, 0x08,
  0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x1a, 0x68, 0x74,
  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x63, 0x70, 0x73, 0x2e, 0x6c, 0x65, 0x74,
  0x73, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x6f, 0x72, 0x67,
  0x30, 0x82, 0x01, 0x04, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6,
  0x79, 0x02, 0x04, 0x02, 0x04, 0x81, 0xf5, 0x04, 0x81, 0xf2, 0x00, 0xf0,
  0x00, 0x76, 0x00, 0x44, 0x94, 0x65, 0x2e, 0xb0, 0xee, 0xce, 0xaf, 0xc4,
  0x40, 0x07, 0xd8, 0xa8, 0xfe, 0x28, 0xc0, 0xda, 0xe6, 0x82, 0xbe, 0xd8,
  0xcb, 0x31, 0xb5, 0x3f, 0xd3, 0x33, 0x96, 0xb5, 0xb6, 0x81, 0xa8, 0x00,
  0x00, 0x01, 0x77, 0x5a, 0x3c, 0x87, 0xf0, 0x00, 0x00, 0x04, 0x03, 0x00,
  0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0x88, 0x21, 0x6e, 0x2d, 0x08, 0x7d,
  0x8b, 0x10, 0xba, 0x88, 0xd7, 0x23, 0x12, 0x82, 0xa4, 0x55, 0xdf, 0x36,
  0x95, 0x12, 0xcb, 0xe8, 0xd4, 0xef, 0xc9, 0x0a, 0x8e, 0x8f, 0x72, 0x9b,
  0x25, 0xc3, 0x02, 0x20, 0x53, 0xf8, 0x33, 0x04, 0xfa, 0x98, 0x76, 0xef,
  0x75, 0x00, 0x4c, 0x48, 0x3f, 0x54, 0xf3, 0x41, 0x17, 0xbd, 0x9e, 0x59,
  0x10, 0x89, 0x8d, 0x36, 0x37, 0x66, 0x34, 0x42, 0x5f, 0xf0, 0x02, 0x6b,
  0x00, 0x76, 0x00, 0x7d, 0x3e, 0xf2, 0xf8, 0x8f, 0xff, 0x88, 0x55, 0x68,
  0x24, 0xc2, 0xc0, 0xca, 0x9e, 0x52, 0x89, 0x79, 0x2b, 0xc5, 0x0e, 0x78,
  0x09, 0x7f, 0x2e, 0x6a, 0x97, 0x68, 0x99, 0x7e, 0x22, 0xf0, 0xd7, 0x00,
  0x00, 0x01, 0x77, 0x5a, 0x3c, 0x88, 0x07, 0x00, 0x00, 0x04, 0x03, 0x00,
  0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0x86, 0xff, 0x85, 0x69, 0xc0, 0xc8,
  0x01, 0xb3, 0xe5, 0xab, 0x43, 0x47, 0x47, 0x2d, 0x84, 0x34, 0x48, 0xbf,
  0xc0, 0xd0, 0x9d, 0xb5, 0xf5, 0xf8, 0x14, 0xdf, 0x28, 0x6e, 0xee, 0x44,
  0x24, 0x34, 0x02, 0x20, 0x21, 0x51, 0xc3, 0xf6, 0x40, 0xd8, 0x2c, 0xb1,
  0x7e, 0x88, 0x3c, 0x83, 0x9b, 0x14, 0x32, 0x61, 0x83, 0x0c, 0x0b, 0xa8,
  0x07, 0xfc, 0x89, 0xa5, 0xfd, 0x0f, 0xdc, 0xa5, 0x28, 0x91, 0x2c, 0xba,
  0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
  0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x28, 0x93, 0xd1, 0xce,
  0xd4, 0x65, 0x16, 0xda, 0x50, 0x4d, 0x9d, 0xbb, 0x70, 0xcc, 0x41, 0xa0,
  0xe8, 0x4b, 0xa8, 0x8d, 0x97, 0xe7, 0x33, 0xd7, 0xab, 0x3a, 0x3d, 0x79,
  0xfb, 0x39, 0x97, 0x8a, 0x23, 0x71, 0x27, 0x67, 0x62, 0x65, 0x57, 0x80,
  0xce, 0xa3, 0x31, 0xd1, 0xa6, 0x7d, 0x3d, 0x8a, 0x01, 0x09, 0x9b, 0x6e,
  0x4d, 0x33, 0x54, 0x59, 0x6d, 0x11, 0x9f, 0x63, 0x2c, 0x04, 0x94, 0x3d,
  0xba, 0x9c, 0x3d, 0xf0, 0x6e, 0x75, 0x76, 0x93, 0x2d, 0xfc, 0x89, 0x87,
  0x3f, 0x26, 0x59, 0x79, 0xa5, 0x6b, 0x0f, 0xc2, 0xba, 0xe6, 0x6a, 0x19,
  0xc3, 0x9b, 0xb8, 0xe7, 0x49, 0xca, 0xec, 0x67, 0x8b, 0xdd, 0x11, 0x31,
  0xcd, 0x46, 0x14, 0x15, 0xe1, 0x11, 0xb6, 0x53, 0x9f, 0x4f, 0x1f, 0x45,
  0x39, 0x7d, 0xac, 0x5d, 0xed, 0x08, 0x67, 0xff, 0xaf, 0x4f, 0xa2, 0xe3,
  0x43, 0xe8, 0xf9, 0x18, 0x39, 0x47, 0xba, 0xde, 0xac, 0x9b, 0xed, 0x3f,
  0x6e, 0xd3, 0x00, 0xdc, 0xfb, 0x17, 0xb8, 0xb8, 0x4d, 0x0d, 0x5b, 0x69,
  0x97, 0x64, 0xb3, 0xaa, 0x16, 0x08, 0x1b, 0x40, 0x6d, 0x63, 0x86, 0x85,
  0xa4, 0x5c, 0x08, 0xfa, 0xdc, 0xa8, 0xc8, 0xec, 0x4a, 0x1a, 0xe9, 0x21,
  0x4f, 0xdd, 0x05, 0xff, 0xd6, 0xcf, 0x90, 0x04, 0x6b, 0x33, 0x84, 0x3e,
  0xdc, 0x91, 0xa2, 0x43, 0x9e, 0xce, 0x7e, 0x4d, 0xc0, 0x3a, 0x19, 0xda,
  0x65, 0x20, 0xe8, 0x58, 0xfc, 0xdd, 0xb5, 0x35, 0x28, 0xc1, 0x71, 0x50,
  0x24, 0x6a, 0x44, 0xf7, 0xf0, 0x0b, 0x63, 0x26, 0xee, 0x67, 0xf5, 0x1a,
  0xd0, 0x20, 0x7f, 0x88, 0x1b, 0xfc, 0x07, 0x4d, 0x05, 0xe7, 0x44, 0x34,
  0x45, 0x2e, 0x31, 0x39, 0xd4, 0x6e, 0xdc, 0x8b, 0xee, 0xe8, 0x86, 0x2b,
  0x32, 0x60, 0x2b, 0xb8, 0x72, 0x40, 0xf5, 0x3f, 0x53, 0x91, 0x78, 0x86
};

static const unsigned int certMentor_cer_len = 1344;


  
class MentorESP8266HTTP
{
    public:
      MentorESP8266HTTP(String accessKey);
      String createDevice(String serviceName, String deviceName);
      // String retrieveAllDevice(String serviceName,int limit=0);
      String storeData(String serviceName, String deviceName, String nameData[], String valueData[], int sizeParameter);
      void begin(); // Initiate JSON buffer
      /*
        Overloaded functions start
        Mentor::push()

        These functions are meant to push data into the
        initiated JSON buffer (created in
        the begin() function)
      */
      void add(String key, String value);
      void add(String key, int value);
      void add(String key, float value);
      void add(String key, double value);

      // 2-level nested json
      void add(String key, String key2, String value);
      void add(String key, String key2, int value);
      void add(String key, String key2, float value);
      void add(String key, String key2, double value);

      /* Overloaded functions end */
      void send(String serviceName, String deviceName); // Store data in buffer to database
      void sendRaw(String text, String serviceName, String deviceName);
      void sendRawNonSecure(String text, String serviceName, String deviceName);
      void sendNonSecure(String serviceName, String deviceName);
      void printData(); // Print waiting list data to serial monitor
      void end();  // Clear JSON buffer
      String retrieveAllData(String serviceName, String deviceName,int limit=0);
      String retrieveLatestData(String serviceName, String deviceName);
      void get(String serviceName, String deviceName);
      String getRaw(String serviceName, String deviceName);
      String getRawNonSecure(String serviceName, String deviceName);
      void getNonSecure(String serviceName, String deviceName);
      void getTest(String serviceName, String deviceName);
      void getLatestTest(String serviceName, String deviceName);
      /*
        Mentor::get() functions

        These functions are meant to fetch data from the
        JSON buffer.
      */
      String getString(String key);
      int getInt(String key);
      float getFloat(String key);
      double getDouble(String key);

      // 2-level nested json

      String getString(String key, String key2);
      int getInt(String key, String key2);
      float getFloat(String key, String key2);
      double getDouble(String key, String key2);

      /* Overloaded functions end */
      bool getSuccess();
      bool wifiConnection(String SSID, String wifiPassword);
      bool wifiConnectionNonSecure(String SSID, String wifiPassword);
      bool checkWifiConnection();
      void setDebug(bool trueFalse);
      void setServer(String domain,String port);

      void measureSize();
      void measureGetSize();

    private:
      void printDebug(String text);
      String ipToString(IPAddress ip);
      String _accessKey;
      String _server = "http://mentorconsole.poliupg.ac.id";
      const char* _serverNoHttp = "mentorconsole.poliupg.ac.id";
      String _port = "8080";
      String _portSecure = "8443";
      uint16_t _portNum = 8080;
      uint16_t _portSecureNum = 8443;
      char* _wifiSSID;
      char* _wifiPass;
      bool _debug=false;
      bool _getSuccess=false;
      char* tempDebug;
      String jsonString = "{}";
      String jsonGetString;
      String _currentKey;
};

#endif
